#include "PlaneGame.h"

#include "Core.h"
#include "Asset.h"
#include "Debug.h"
#include "Event.h"
#include "Rendering/Renderer.h"
#include "Text.h"
#include "Timing.h"
#include "Types.h"
#include "UI.h"
#include "Entity.h"
#include "Widgets.h"

#include <imgui.h>

Velox::Font* g_font;



void doUpdates(const double& deltaTime)
{
}

void doTestStuff()
{
    Velox::drawQuad(vec3(100.0f, 100.0f, 0.0f), vec2(200.0f, 200.0f), vec4(1.0f));

    Velox::drawRect(vec3(90.0f, 90.0f, 0.0f), vec2(220.0f, 220.0f), vec4(1.0f));

    Velox::drawQuad(vec3(100.0f, 400.0f, 0.0f), vec2(200.0f, 200.0f), vec4(1.0f),
            Velox::getAssetManager()->getTexture("missing_texture.png"));

    Velox::drawQuad(vec3(400.0f, 100.0f, 0.0f), vec2(500.0f, 500.0f), vec4(1.0f), g_font->texture);

    Velox::drawQuad(vec3(950.0f, 100.0f, 0.0f), vec2(1200.0f, 500.0f), vec4(1.0f));

    Velox::TextDrawStyle textInfo {};
    textInfo.textSize = 130.0f;
    Velox::pushTextStyle(textInfo);

    Velox::TextDrawStyle editorStyle {};
    Velox::textStyleEditor(&editorStyle, true);

    Velox::pushTextStyle(editorStyle);

    Velox::pushFont("martius.ttf");
    
    Velox::drawText("<- MSDF Texture", vec3(1000.0f, 500.0f, 0.0f));
    Velox::popFont();
    Velox::drawText("text in another font", vec3(1000.0f, 400.0f, 0.0f));

    vec3 continueTextPosition = vec3(1000.0f, 300.0f, 0.0f);
    Velox::TextContinueInfo contInfo = Velox::drawText("con", continueTextPosition);
    contInfo = Velox::drawColoredText("tin", continueTextPosition, COLOR_RED, &contInfo);
    contInfo = Velox::drawColoredText("ued ", continueTextPosition, COLOR_GREEN, &contInfo);
    contInfo = Velox::drawColoredText("text and\non ", continueTextPosition, COLOR_BLUE, &contInfo);
    contInfo = Velox::drawColoredText("new line", continueTextPosition, COLOR_GRAY_LIGHT, &contInfo);

    vec3 testPos(2200.0f, 300.0f, 0.0f);
    const char* testText = "boundtest";
    Velox::drawText(testText, testPos);

    Velox::Rectangle bounds;
    Velox::getStringBounds(testText, testPos, &bounds);

    Velox::drawRect(bounds, COLOR_GREEN);

    Velox::popTextStyle();
    Velox::popTextStyle();

    Velox::drawLine(vec3(100.0f, 615.0f, 0.0f), vec3(900.0f, 615.0f, 0.0f), COLOR_RED);

    float startHeight = 620.0f;
    editorStyle.textSize = 20.0f;
    for (int i = 0; i < 10; i++)
    {
        startHeight += editorStyle.textSize;
        editorStyle.textSize = editorStyle.textSize * 1.5f;
        Velox::pushTextStyle(editorStyle);
        Velox::drawText("SAMPLE TEXT", vec3(100.0f, startHeight, 0.0f));
        Velox::popTextStyle();
    }

}

void doUITestStuff()
{
    UI::beginBuild();

    UI::Comm comm = UI::window({ 100.0f, 100.0f, 400.0f, 400.0f }, "test_window");

    UI::endBuild();
}

void doRenderingStuff()
{
    doUITestStuff();

    // ImGui::ShowDemoWindow();

    UI::drawBoxes();
}

void run()
{
    Velox::init();

    g_font = Velox::getAssetManager()->loadFont("martius.ttf");

    while (!Velox::quitRequested())
    {
        Velox::getEventPublisher()->processEvents();

        Velox::updateGame(doUpdates);

        doRenderingStuff();

        Velox::submitFrameData();

        // Calculate after frame present.
        Velox::calculateDeltaTime();
    }

    // Cleanup.
    Velox::deInit();
}

int main(int argc, char** argv)
{   
    // runPlaneGame();
    run();
    return 0;
}
